{"version":3,"sources":["Event.js","EventList.js","mockData.js","CitySearch.js","NumberOfEvents.js","App.js","api.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","showText","Card","Body","Title","Subtitle","className","Text","Button","variant","Collapse","in","this","Component","EventList","events","props","Row","map","event","id","mockData","CitySearch","query","suggestions","handleInputChanged","value","target","locations","filter","location","toUpperCase","indexOf","setState","handleItemClicked","suggestion","type","onChange","onClick","NumberOfEvents","App","extractLocations","Set","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.42069d7c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Button, Card } from 'react-bootstrap';\n\nclass Event extends Component {\n  constructor(){\n    super();\n    this.state = { \n      showText: false\n    };\n  }\n\n  render() {\n    return (\n      <Card>\n        <Card.Body>\n          <Card.Title>Event Title</Card.Title>\n          <Card.Subtitle className=\"mb-2 text-muted\">Event Location</Card.Subtitle>\n          <Card.Text>Event date and Time</Card.Text>\n          <Button variant=\"link\" className=\"displayMore\">Show Details</Button>\n          <Collapse className=\"extraDetails\" in={this.state.showText}>\n            <div>\n              <Card.Text>Event Description</Card.Text>\n            </div>\n          </Collapse>\n          </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default Event;","import React, { Component } from 'react';\nimport Event from './Event';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nclass EventList extends Component {\n  render() {\n    const { events } = this.props;\n    return (\n        <Row>\n          <div>Current Events</div>\n          <ul className=\"EventList\">\n            {events && events.map(event =>\n              <li key={event.id}>\n                <Event event={event} />\n              </li>\n            )}\n          </ul>\n        </Row>\n    );\n  }\n}\n\nexport default EventList;","const mockData = [ \n\n  {\n    \"kind\": \"calendar#event\",\n    \"etag\": \"\\\"3181161784712000\\\"\",\n    \"id\": \"4eahs9ghkhrvkld72hogu9ph3e_20200519T140000Z\",\n    \"status\": \"confirmed\",\n    \"htmlLink\": \"https://www.google.com/calendar/event?eid=NGVhaHM5Z2hraHJ2a2xkNzJob2d1OXBoM2VfMjAyMDA1MTlUMTQwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20\",\n    \"created\": \"2020-05-19T19:17:46.000Z\",\n    \"updated\": \"2020-05-27T12:01:32.356Z\",\n    \"summary\": \"Learn JavaScript\",\n    \"description\": \"Have you wondered how you can ask Google to show you the list of the top ten must-see places in London? And how Google presents you the list? How can you submit the details of an application? Well, JavaScript is doing these. :) \\n\\nJavascript offers interactivity to a dull, static website. Come, learn JavaScript with us and make those beautiful websites.\",\n    \"location\": \"London, UK\",\n    \"creator\": {\n     \"email\": \"fullstackwebdev@careerfoundry.com\",\n     \"self\": true\n    },\n    \"organizer\": {\n     \"email\": \"fullstackwebdev@careerfoundry.com\",\n     \"self\": true\n    },\n    \"start\": {\n     \"dateTime\": \"2020-05-19T16:00:00+02:00\",\n     \"timeZone\": \"Europe/Berlin\"\n    },\n    \"end\": {\n     \"dateTime\": \"2020-05-19T17:00:00+02:00\",\n     \"timeZone\": \"Europe/Berlin\"\n    },\n    \"recurringEventId\": \"4eahs9ghkhrvkld72hogu9ph3e\",\n    \"originalStartTime\": {\n     \"dateTime\": \"2020-05-19T16:00:00+02:00\",\n     \"timeZone\": \"Europe/Berlin\"\n    },\n    \"iCalUID\": \"4eahs9ghkhrvkld72hogu9ph3e@google.com\",\n    \"sequence\": 0,\n    \"reminders\": {\n     \"useDefault\": true\n    },\n    \"eventType\": \"default\"\n   },\n   {\n    \"kind\": \"calendar#event\",\n    \"etag\": \"\\\"3181159875584000\\\"\",\n    \"id\": \"3qtd6uscq4tsi6gc7nmmtpqlct_20200520T120000Z\",\n    \"status\": \"confirmed\",\n    \"htmlLink\": \"https://www.google.com/calendar/event?eid=M3F0ZDZ1c2NxNHRzaTZnYzdubW10cHFsY3RfMjAyMDA1MjBUMTIwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20\",\n    \"created\": \"2020-05-19T19:14:30.000Z\",\n    \"updated\": \"2020-05-27T11:45:37.792Z\",\n    \"summary\": \"React is Fun\",\n    \"description\": \"Love HTML, CSS, and JS? Want to become a cool front-end developer? \\n\\nReact is one of the most popular front-end frameworks. There is a huge number of job openings for React developers in most cities. \\n\\nJoin us in our free React training sessions and give your career a new direction. \",\n    \"location\": \"Berlin, Germany\",\n    \"creator\": {\n     \"email\": \"fullstackwebdev@careerfoundry.com\",\n     \"self\": true\n    },\n    \"organizer\": {\n     \"email\": \"fullstackwebdev@careerfoundry.com\",\n     \"self\": true\n    },\n    \"start\": {\n     \"dateTime\": \"2020-05-20T14:00:00+02:00\",\n     \"timeZone\": \"Europe/Berlin\"\n    },\n    \"end\": {\n     \"dateTime\": \"2020-05-20T15:00:00+02:00\",\n     \"timeZone\": \"Europe/Berlin\"\n    },\n    \"recurringEventId\": \"3qtd6uscq4tsi6gc7nmmtpqlct\",\n    \"originalStartTime\": {\n     \"dateTime\": \"2020-05-20T14:00:00+02:00\",\n     \"timeZone\": \"Europe/Berlin\"\n    },\n    \"iCalUID\": \"3qtd6uscq4tsi6gc7nmmtpqlct@google.com\",\n    \"sequence\": 0,\n    \"reminders\": {\n     \"useDefault\": true\n    },\n    \"eventType\": \"default\"\n   },\n];\n\nexport { mockData };","import React, { Component } from 'react';\nimport { mockData } from './mockData';\nimport { extractLocations } from './api';\n\n\nclass CitySearch extends Component {\n  \n  state = {\n    query:'',\n    suggestions: []\n  }\n  \n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    const suggestions = this.props.locations.filter((location) => {\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n    });\n    this.setState({ \n      query: value,\n      suggestions, \n    });\n  };\n\n  handleItemClicked = (suggestion) => {\n    this.setState({\n      query: suggestion\n    });\n  }\n\n  render() { \n    return (\n      <div className=\"CitySearch\">\n        \n        <input type=\"text\" id=\"citySearch\" className=\"city\" value={this.state.query} onChange={this.handleInputChanged} />\n\n        <ul className=\"suggestions\">\n          {this.state.suggestions.map((suggestion) => (\n          <li\n            key={suggestion}\n            onClick={() => this.handleItemClicked(suggestion)}\n            >{suggestion}</li>\n          ))}\n          <li>\n            <b>See all cities</b>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default CitySearch","import React, { Component } from 'react';\n\nclass NumberOfEvents extends Component {\n  \n  state = {\n    query:'',\n  }\n  \n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    this.setState({ \n      query: value,\n    });\n  };\n\n  render() { \n    return (\n      <div className=\"CitySearch\">\n        <input type=\"text\" id=\"numberInput\" className=\"numberInput\" value={this.state.query} onChange={this.handleInputChanged} />\n      </div>\n    );\n  }\n}\n\nexport default NumberOfEvents;","import React, { Component } from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\nimport { extractLocations } from './api';\nimport { mockData } from './mockData';\n\nclass App extends Component {\n  render() {\n    const locations = extractLocations(mockData);\n    return (\n      <div className=\"App\">\n      <h1>This meetup app should render</h1>\n        <CitySearch locations={locations} />\n        <NumberOfEvents />\n        <EventList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const extractLocations = (events) => {\n  var extractLocations = events.map((event) => event.location);\n  var locations = [...new Set(extractLocations)];\n  return locations;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.unregister();\nreportWebVitals();\n"],"sourceRoot":""}